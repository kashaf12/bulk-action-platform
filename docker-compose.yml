version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MAX_FILE_SIZE_MB=10
      - MAX_CSV_ROWS=100001
      - RATE_LIMIT_MAX_REQUESTS=10000
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - INGESTION_WORKERS=${INGESTION_WORKERS:-5}
      - CHUNKING_WORKERS=${CHUNKING_WORKERS:-3}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
      - MAX_REQUEST_SIZE=50mb
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=api"

  chunking-workers:
    build:
      context: .
      dockerfile: docker/chunking.Dockerfile
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - CHUNKING_WORKER_COUNT=${CHUNKING_WORKERS:-3}
      - MAX_MEMORY_PER_WORKER=256
      - TOTAL_MEMORY_LIMIT=1024
      - AUTO_RESTART_WORKERS=true
      - MAX_RESTART_ATTEMPTS=3
      - HEALTH_CHECK_PORT=8001
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: ${CHUNKING_REPLICAS:-2}
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Chunking worker health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=chunking-workers"

  processing-worker-p0:
    build:
      context: .
      dockerfile: docker/processing.Dockerfile
    environment:
      - NODE_ENV=production
      - PARTITION_ID=0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - PROCESSING_WORKER_COUNT=5
      - BATCH_SIZE=1000
      - JOB_TIMEOUT=300000
      - MAX_MEMORY_PER_WORKER=256
      - MAX_RESTART_ATTEMPTS=3
      - HEALTH_CHECK_PORT=8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      chunking-workers:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Processing worker health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=processing-worker-p0"

  processing-worker-p1:
    build:
      context: .
      dockerfile: docker/processing.Dockerfile
    environment:
      - NODE_ENV=production
      - PARTITION_ID=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - PROCESSING_WORKER_COUNT=5
      - BATCH_SIZE=1000
      - JOB_TIMEOUT=300000
      - MAX_MEMORY_PER_WORKER=256
      - MAX_RESTART_ATTEMPTS=3
      - HEALTH_CHECK_PORT=8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      chunking-workers:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Processing worker health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=processing-worker-p1"

  processing-worker-p2:
    build:
      context: .
      dockerfile: docker/processing.Dockerfile
    environment:
      - NODE_ENV=production
      - PARTITION_ID=2
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - PROCESSING_WORKER_COUNT=5
      - BATCH_SIZE=1000
      - JOB_TIMEOUT=300000
      - MAX_MEMORY_PER_WORKER=256
      - MAX_RESTART_ATTEMPTS=3
      - HEALTH_CHECK_PORT=8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      chunking-workers:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Processing worker health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=processing-worker-p2"

  processing-worker-p3:
    build:
      context: .
      dockerfile: docker/processing.Dockerfile
    environment:
      - NODE_ENV=production
      - PARTITION_ID=3
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - PROCESSING_WORKER_COUNT=5
      - BATCH_SIZE=1000
      - JOB_TIMEOUT=300000
      - MAX_MEMORY_PER_WORKER=256
      - MAX_RESTART_ATTEMPTS=3
      - HEALTH_CHECK_PORT=8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      chunking-workers:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Processing worker health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=processing-worker-p3"

  processing-worker-p4:
    build:
      context: .
      dockerfile: docker/processing.Dockerfile
    environment:
      - NODE_ENV=production
      - PARTITION_ID=4
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-storage}
      - MINIO_REGION=us-east-1
      - PROCESSING_WORKER_COUNT=5
      - BATCH_SIZE=1000
      - JOB_TIMEOUT=300000
      - MAX_MEMORY_PER_WORKER=256
      - MAX_RESTART_ATTEMPTS=3
      - HEALTH_CHECK_PORT=8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      chunking-workers:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Processing worker health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=processing-worker-p4"
        
  postgres:
    image: postgres:15-alpine
    container_name: bulk-action-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-bulk_action_platform}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./db/postgres:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-bulk_action_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=postgres"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  redis:
    image: redis/redis-stack:latest
    container_name: bulk-action-redis
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - ./redis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis"

  db-seed:
    build:
      context: .
      dockerfile: docker/seed.Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-bulk_action_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password123}
      - SEED_CONTACTS=${SEED_CONTACTS:-1000000}
      - SEED_ACCOUNTS=${SEED_ACCOUNTS:-10}
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=db-seed"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=pgadmin"

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - ./storage:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=minio"

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
        mc mb -p local/${MINIO_BUCKET_NAME:-storage} || true;
        mc anonymous set none local/${MINIO_BUCKET_NAME:-storage};
        echo 'MinIO bucket ${MINIO_BUCKET_NAME:-storage} created and secured';
      "
    restart: "no"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=minio-init"

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    # command: -config.file=/etc/loki/local-config.yaml
    volumes:
      # - ./loki:/etc/loki
      - loki_data:/loki
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000" # Map to 3001 to avoid conflict if API uses 3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    depends_on:
      - loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: unless-stopped

volumes:
  loki_data:
  grafana_data:    